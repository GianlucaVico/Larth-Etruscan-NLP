{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["BMiI_CqizPCW","6Rl1TfhC1Q6F","pwrG7adP6XMZ"],"authorship_tag":"ABX9TyMeea57waNgWtGkDw4lmk8K"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"a8e81fb6a0aa4e6e9800cbef41188f5d":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_2834eb3367344b848e4dc71edd3f892c","IPY_MODEL_f345a7f890e94e7aa6a9435226bba496","IPY_MODEL_2e74c58c3c954c9da479c27784bcce56"],"layout":"IPY_MODEL_e32ac5f763984e60b7298a1509377174"}},"2834eb3367344b848e4dc71edd3f892c":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_fe46d1dffa794376a6cb7babe8aac59a","placeholder":"​","style":"IPY_MODEL_5ffcc129a0054682a2622a640de66642","value":"100%"}},"f345a7f890e94e7aa6a9435226bba496":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_b51893ae61cd458483478ae262396f97","max":89298,"min":0,"orientation":"horizontal","style":"IPY_MODEL_e926a15ea4984c3faa5af38441aba1c3","value":89298}},"2e74c58c3c954c9da479c27784bcce56":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b3be6297aebd4235932989d2f78f3dea","placeholder":"​","style":"IPY_MODEL_67915fc0112c42b9b5984fca9aefc139","value":" 89298/89298 [00:11&lt;00:00, 7539.19it/s]"}},"e32ac5f763984e60b7298a1509377174":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"fe46d1dffa794376a6cb7babe8aac59a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5ffcc129a0054682a2622a640de66642":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"b51893ae61cd458483478ae262396f97":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e926a15ea4984c3faa5af38441aba1c3":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"b3be6297aebd4235932989d2f78f3dea":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"67915fc0112c42b9b5984fca9aefc139":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"markdown","source":["# Merge ETP\n","This notebook is used to merge the inscriptions from the ETP website and the clean ETP CSV file."],"metadata":{"id":"OXR44RsXxU5q"}},{"cell_type":"code","source":["!pip install levenshtein"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"REF6Vg-N5gu3","executionInfo":{"status":"ok","timestamp":1674035020388,"user_tz":-60,"elapsed":4304,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}},"outputId":"d26ba9ae-94c1-4774-e4bb-7b071daff5de"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: levenshtein in /usr/local/lib/python3.8/dist-packages (0.20.9)\n","Requirement already satisfied: rapidfuzz<3.0.0,>=2.3.0 in /usr/local/lib/python3.8/dist-packages (from levenshtein) (2.13.7)\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import bs4\n","from bs4 import BeautifulSoup\n","from tqdm.notebook import tqdm\n","from typing import Tuple, Optional\n","import Levenshtein"],"metadata":{"id":"R1DcupPBychg"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yGWLln1sxQ5d"},"outputs":[],"source":["csv_file = \"ETP_clean.csv\"\n","html_file = \"ETP - search.htm\""]},{"cell_type":"markdown","source":["## Load data"],"metadata":{"id":"BMiI_CqizPCW"}},{"cell_type":"code","source":["cleanETP = pd.read_csv(csv_file, index_col = 0)\n","cleanETP"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"yU3YOsXYzEKo","executionInfo":{"status":"ok","timestamp":1674035021306,"user_tz":-60,"elapsed":11,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}},"outputId":"021cd760-2bc1-4ae6-cfa8-de8dc4478ede"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           ID                                           Etruscan  \\\n","0    ETP 192                 cleusinas : laris : larisal : clan    \n","1    Cr 2.20                                 mi karkanas θahvna    \n","2    Cm 2.46    mi e.i. mi.n.pi capi mi numar | θevru.c.l.na....   \n","3    ETP 269    mini muluvanice tetana ve.l.ka.s.na.s. veleli...   \n","4     Ta 3.2      itun turuce vene.l a.telinas. tinas dlniiaras    \n","..        ...                                                ...   \n","237   ERP 27                                   vel uθraσ | mlax    \n","238   Po 4.4    śθ • velσu • lθ • c • lθ . ve[lσu] [•] inpa •...   \n","239   Vt 4.2              θuσuθur σelaśva θlu θupit aisece tati    \n","240  Vs 7.25                                     zatlaθ : aiθas    \n","241   Ts S.8                                 σ'eθlans uni trepu    \n","\n","                                           Translation  \n","0                      Laris Cleusinas, son of Laris.   \n","1                      I (am) the container of Karkana  \n","2     'Don't take me. I (am) nunar. (I am the prope...  \n","3                Tetana Velkasnas gave me to Velellia.  \n","4     Venel Atelinas dedicated this (vase) to the s...  \n","..                                                 ...  \n","237                         Vel Uthra, (a) good (man)   \n","238   Shethre Velsu, son of Larth; Larth Velsu; inp...  \n","239   O Thusu gods (?), the sela ones, thlu (?) in ...  \n","240                             guard of Aitha (Hades)  \n","241                  Shethlans, Uni, Trepu (worker ?)   \n","\n","[242 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-dadfbeb0-ddf0-4d12-b679-e029f3f0a9f0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>Etruscan</th>\n","      <th>Translation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ETP 192</td>\n","      <td>cleusinas : laris : larisal : clan</td>\n","      <td>Laris Cleusinas, son of Laris.</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Cr 2.20</td>\n","      <td>mi karkanas θahvna</td>\n","      <td>I (am) the container of Karkana</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Cm 2.46</td>\n","      <td>mi e.i. mi.n.pi capi mi numar | θevru.c.l.na....</td>\n","      <td>'Don't take me. I (am) nunar. (I am the prope...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ETP 269</td>\n","      <td>mini muluvanice tetana ve.l.ka.s.na.s. veleli...</td>\n","      <td>Tetana Velkasnas gave me to Velellia.</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Ta 3.2</td>\n","      <td>itun turuce vene.l a.telinas. tinas dlniiaras</td>\n","      <td>Venel Atelinas dedicated this (vase) to the s...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>237</th>\n","      <td>ERP 27</td>\n","      <td>vel uθraσ | mlax</td>\n","      <td>Vel Uthra, (a) good (man)</td>\n","    </tr>\n","    <tr>\n","      <th>238</th>\n","      <td>Po 4.4</td>\n","      <td>śθ • velσu • lθ • c • lθ . ve[lσu] [•] inpa •...</td>\n","      <td>Shethre Velsu, son of Larth; Larth Velsu; inp...</td>\n","    </tr>\n","    <tr>\n","      <th>239</th>\n","      <td>Vt 4.2</td>\n","      <td>θuσuθur σelaśva θlu θupit aisece tati</td>\n","      <td>O Thusu gods (?), the sela ones, thlu (?) in ...</td>\n","    </tr>\n","    <tr>\n","      <th>240</th>\n","      <td>Vs 7.25</td>\n","      <td>zatlaθ : aiθas</td>\n","      <td>guard of Aitha (Hades)</td>\n","    </tr>\n","    <tr>\n","      <th>241</th>\n","      <td>Ts S.8</td>\n","      <td>σ'eθlans uni trepu</td>\n","      <td>Shethlans, Uni, Trepu (worker ?)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>242 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dadfbeb0-ddf0-4d12-b679-e029f3f0a9f0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-dadfbeb0-ddf0-4d12-b679-e029f3f0a9f0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-dadfbeb0-ddf0-4d12-b679-e029f3f0a9f0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["with open(html_file) as f:\n","    html = BeautifulSoup(f)\n","print(\"Len:\", len(html))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3adrP-gXzbM8","executionInfo":{"status":"ok","timestamp":1674035021698,"user_tz":-60,"elapsed":401,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}},"outputId":"a9a0d306-6229-41ad-b735-ff4cedc22067"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Len: 5\n"]}]},{"cell_type":"markdown","source":["## Extract from HTML"],"metadata":{"id":"6Rl1TfhC1Q6F"}},{"cell_type":"code","source":["docs = html.findAll(\"div\", {\"class\":\"document\"})\n","print(\"Documents:\", len(docs))\n","print(\"Expected documents: 369\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8CmMTYn11B5I","executionInfo":{"status":"ok","timestamp":1674035022909,"user_tz":-60,"elapsed":476,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}},"outputId":"f51727c7-3f64-44eb-8590-04cd585c028d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Documents: 369\n","Expected documents: 369\n"]}]},{"cell_type":"code","source":["def extract_pairs(html_doc: bs4.element.Tag) -> Optional[Tuple[int, str]]:\n","    \"\"\"\n","    Extract the ETP id and the text from each document\n","\n","    Args:\n","        html_doc: bs4 tag containing the document\n","    Returns:\n","        id: ETP id as int\n","        text: Etruscan text\n","    \"\"\"\n","    id = html_doc.findAll(\"h3\")\n","    if len(id) == 0:\n","        print(\"Can't find id\")\n","        return None\n","    if len(id) > 1:\n","        print(\"Multiple ids\")\n","    try:\n","        id = int(id[0].text.strip().split(\":\")[0].split(\" \")[1])\n","    except ValueError:\n","        print(f\"Can't parse id: {id[0].text}\")\n","\n","    text = html_doc.findAll(\"div\", {\"class\": \"text\"})\n","    if len(text) == 0:\n","        print(f\"{id}: Can't find text\")\n","        return None\n","    if len(text) > 1:\n","        print(f\"{id}: Multiple texts\")\n","    text = text[0].text.strip()\n","    return id, text"],"metadata":{"id":"2JK9RugV1Lap"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pairs = [extract_pairs(i) for i in docs]\n","pairs[:5]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"whVYxkpw1cIr","executionInfo":{"status":"ok","timestamp":1674035023659,"user_tz":-60,"elapsed":5,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}},"outputId":"db9c9415-a9ce-431f-8cc5-84b79b3bf4fe"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(1, 'larθ : raplni :'),\n"," (2, 'mi v[e]nelus vefunas'),\n"," (3, 'larθi : peθnei : frauniσa \\n    laθinial : sec :'),\n"," (4, '[ - - v]enel p[ - - - ]'),\n"," (5, 'lariσ')]"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["htmlETP = pd.DataFrame(pairs, columns=[\"ID\",\"Etruscan\"])\n","htmlETP"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"P9iHsOoO4hHH","executionInfo":{"status":"ok","timestamp":1674035024128,"user_tz":-60,"elapsed":7,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}},"outputId":"473496ab-7b72-47df-af78-9882d86ffd8d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      ID                                          Etruscan\n","0      1                                   larθ : raplni :\n","1      2                              mi v[e]nelus vefunas\n","2      3  larθi : peθnei : frauniσa \\n    laθinial : sec :\n","3      4                           [ - - v]enel p[ - - - ]\n","4      5                                             lariσ\n","..   ...                                               ...\n","364  365                             [ – – – ]urθ[ – – – ]\n","365  366                            [ – – – ]alv[  – – – ]\n","366  367                           [ – – – ]tinai[ – – – ]\n","367  368                           [ – – – ]nutas[ – – – ]\n","368  369                  [ – – – ]xtrus · apanal · θucl ·\n","\n","[369 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-9d5e4d55-ffd8-47ef-b5a2-c31928a6689f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>Etruscan</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>larθ : raplni :</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>mi v[e]nelus vefunas</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>larθi : peθnei : frauniσa \\n    laθinial : sec :</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>[ - - v]enel p[ - - - ]</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>lariσ</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>364</th>\n","      <td>365</td>\n","      <td>[ – – – ]urθ[ – – – ]</td>\n","    </tr>\n","    <tr>\n","      <th>365</th>\n","      <td>366</td>\n","      <td>[ – – – ]alv[  – – – ]</td>\n","    </tr>\n","    <tr>\n","      <th>366</th>\n","      <td>367</td>\n","      <td>[ – – – ]tinai[ – – – ]</td>\n","    </tr>\n","    <tr>\n","      <th>367</th>\n","      <td>368</td>\n","      <td>[ – – – ]nutas[ – – – ]</td>\n","    </tr>\n","    <tr>\n","      <th>368</th>\n","      <td>369</td>\n","      <td>[ – – – ]xtrus · apanal · θucl ·</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>369 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9d5e4d55-ffd8-47ef-b5a2-c31928a6689f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9d5e4d55-ffd8-47ef-b5a2-c31928a6689f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9d5e4d55-ffd8-47ef-b5a2-c31928a6689f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["## Compute similarity"],"metadata":{"id":"pwrG7adP6XMZ"}},{"cell_type":"code","source":["def processor(s: str) -> str:\n","    \"Clean a str for the comparison\"\n","    s = s.replace(\" \", \"\")  # Ignore space for distance\n","    s = s.replace(\":\", \"\")  # Ignore other symbols for \"space\"\n","    s = s.replace(\"·\", \"\")\n","    s = s.replace(\"|\", \"\")\n","    s = s.replace(\".\", \"\")\n","    s = s.replace(\"\\t\", \"\")\n","    s = s.replace(\"\\n\", \"\")  # Ignore new lines\n","    s = s.replace(\"/\", \"\")\n","    s = s.replace(\"š\", \"s\")  # Ignore letter's variations\n","    s = s.replace(\"'\", \"\")\n","    s = s.replace(\"ś\", \"s\")\n","    s = s.replace(\"ê\", \"e\")\n","\n","    return s"],"metadata":{"id":"x6VIf8o46Mxd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["distances = np.ones((len(cleanETP), len(htmlETP))) * np.inf"],"metadata":{"id":"wNgdScAW6iy3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tot = distances.size\n","with tqdm(total=tot) as pbar:\n","    for i, (cleanId, cleanEtr, _) in enumerate(cleanETP.iloc):\n","        for j, (htmlId, htmlEtr) in enumerate(htmlETP.iloc):\n","            distances[i, j] = Levenshtein.distance(cleanEtr, htmlEtr, processor=processor)\n","            pbar.update()\n","distances"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":171,"referenced_widgets":["a8e81fb6a0aa4e6e9800cbef41188f5d","2834eb3367344b848e4dc71edd3f892c","f345a7f890e94e7aa6a9435226bba496","2e74c58c3c954c9da479c27784bcce56","e32ac5f763984e60b7298a1509377174","fe46d1dffa794376a6cb7babe8aac59a","5ffcc129a0054682a2622a640de66642","b51893ae61cd458483478ae262396f97","e926a15ea4984c3faa5af38441aba1c3","b3be6297aebd4235932989d2f78f3dea","67915fc0112c42b9b5984fca9aefc139"]},"id":"g3NbREKG8r6-","executionInfo":{"status":"ok","timestamp":1671096745356,"user_tz":-60,"elapsed":11822,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}},"outputId":"0ed47517-4f45-4422-9560-177dd1d1cf7b"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/89298 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a8e81fb6a0aa4e6e9800cbef41188f5d"}},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["array([[19., 21., 22., ..., 23., 23., 20.],\n","       [12., 13., 24., ..., 19., 16., 17.],\n","       [35., 33., 35., ..., 39., 38., 34.],\n","       ...,\n","       [27., 25., 26., ..., 29., 28., 27.],\n","       [ 9., 15., 23., ..., 19., 17., 16.],\n","       [12., 16., 24., ..., 19., 18., 18.]])"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["plt.imshow(distances)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":286},"id":"Bw9AULmi9mZl","executionInfo":{"status":"ok","timestamp":1671096745915,"user_tz":-60,"elapsed":568,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}},"outputId":"fcc40d41-1c5f-423c-b2c3-6d9a178d03fc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7fb6e7d56070>"]},"metadata":{},"execution_count":30},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.title(\"Minimum distance - entire matrix\")\n","plt.hist(distances.flatten(), range=[0, 5])\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"LNqoKqTI-vjH","executionInfo":{"status":"ok","timestamp":1671096746429,"user_tz":-60,"elapsed":525,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}},"outputId":"fef87a09-3e97-4a2d-d1c0-068a2ac1facf"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.title(\"Minimum distance - mimimum for ETP clean\")\n","plt.hist(distances.min(axis=1), range=[0, 10])\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"9p0wWuMy_tt9","executionInfo":{"status":"ok","timestamp":1671096747056,"user_tz":-60,"elapsed":638,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}},"outputId":"1beca64f-609a-4626-af30-05a1adec4f60"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["def ask_match(cleanETP, htmlETP, dist, n = 3): \n","    index_map = []\n","    tot = len(cleanETP)\n","    print(\"Insert number of the best matching string. \\nAny non-numeric string if there is not a good match\")\n","    try:\n","        for i, (cleanId, cleanEtr, _) in enumerate(cleanETP.iloc):\n","            top = dist[i].argsort()[:n]\n","            print(f\"Example {i+1}/{tot}: {cleanEtr}\\n\")\n","            for j, index in enumerate(top):\n","                htmlId, htmlEtr = htmlETP.iloc[index]\n","                print(f\"{j} - {htmlEtr}\")\n","            match_ = input(\"Match:\")\n","            index_map.append((i, match_))\n","    except KeyboardInterrupt:\n","        print(\"Interrupted\")\n","    return index_map, i"],"metadata":{"id":"iig-yVWLAAIt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["index_map, done = ask_match(cleanETP[(distances.min(axis=1) <= 10)], htmlETP, distances[(distances.min(axis=1) <= 10)])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vHK7eACiGgi_","executionInfo":{"status":"ok","timestamp":1671098046254,"user_tz":-60,"elapsed":534008,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}},"outputId":"2c174ef5-7bf2-4cba-92d1-b56438a8d92e"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Insert number of the best matching string. \n","Any non-numeric string if there is not a good match\n","Example 1/89:  cleusinas : laris : larisal : clan \n","\n","0 - cleusinas : laris : larisal : clan\n","1 - cusinas · larθal\n","2 - laris : almni : larθ[al]\n","Match:0\n","Example 2/89:  mi karkanas θahvna \n","\n","0 - mi larzas atrnas\n","1 - mi larθia tarinas\n","2 - mi tarnaial\n","Match:\n","Example 3/89:  mini muluvanice tetana ve.l.ka.s.na.s. veleliiasi \n","\n","0 - mini muluvanice tetana ve.l.ka.s.na.s. veleliiasi\n","1 - mini muluvunike pisna perkena\n","2 - mi mulu venelasi velχaesi rasuniesi\n","Match:0\n","Example 4/89:  mi menervas \n","\n","0 - mi menervas\n","1 - mi venelus\n","2 - mi urqenas\n","Match:0\n","Example 5/89:  θanaχvil \n","\n","0 - θanaχti\n","1 - θac θva\n","2 - mi θanuχvilus\n","Match:\n","Example 6/89:  mi qutum karkanas \n","\n","0 - mi : σuris : cavaθas\n","1 - qurianas\n","2 - mi tarnaial\n","Match:\n","Example 7/89:  mi spanti larices \n","\n","0 - mi larices\n","1 - mi mutilates\n","2 - mi larice[s]\n","Match:\n","Example 8/89:  turis : mi : une : ame \n","\n","0 - laris\n","    ecnatie\n","1 - qurianas\n","2 - turuns\n","Match:\n","Example 9/89:  cên • zic • ziχuχe... \n","\n","0 - ceisei\n","1 - mi cipaχ\n","2 - cnaviies mi\n","Match:\n","Example 10/89:  ein θui ara enan \n","\n","0 - ein θui ara enan\n","1 - mi urqenas\n","2 - mi larθia tarnas\n","Match:0\n","Example 11/89:  mi araθiale ziχuχe \n","\n","0 - mi aranθial\n","1 - mi laθialus\n","2 - mi araθia\n","Match:\n","Example 12/89:  mi aliqu : auvilesi \n","\n","0 - mi larices\n","1 - mi alza ceriies\n","2 - mi θanuχvilus\n","Match:\n","Example 13/89:  marce • maclae \n","\n","0 - larzas maias\n","1 - larθ : raplni :\n","2 - la cae\n","Match:\n","Example 14/89:  r • matunai | canatnei \n","\n","0 - θania : alσinei\n","1 - ramθa · camnai\n","2 - aθ : σeθrna : clanti\n","Match:\n","Example 15/89:  vel • fastntru • aθ \n","\n","0 - velχasnas\n","1 - velfras · \n","    laris · \n","    ne\n","2 - vel : vestrcnie\n","Match:\n","Example 16/89:  hasti : petruσ : \n","\n","0 - laris atiu\n","1 - [l]arθ petrus\n","2 - fastia\n","Match:\n","Example 17/89:  θana : punp | naσ : lautni | θa \n","\n","0 - a · a · pumpnaliσa\n","1 - aθ : σeθrna : clanti\n","2 - θana . velθuria : uvial\n","Match:\n","Example 18/89:  vel : tite : aules \n","\n","0 - men tite\n","1 - velχi θan\n","    a\n","2 - title\n","Match:\n","Example 19/89:  mi aranθia flavienas \n","\n","0 - [mi] aranθia lapanas\n","1 - mi larθia tarinas\n","2 - mi larθia tarnas\n","Match:\n","Example 20/89:  mi velelias hirminaia \n","\n","0 - mi venelus σiθurnas\n","1 - mi larzas atrnas\n","2 - mi aveles metienas\n","Match:\n","Example 21/89:  tutes • arnθ • larθal \n","\n","0 - cusinas · larθal\n","1 - pumpun\n","    larθal\n","2 - mi tarnaial\n","Match:\n","Example 22/89:  aθ : herine : vipinal :  | fufle \n","\n","0 - arnθ · vipina · cuφre\n","1 - lθ : purni : lθ : petrual :\n","2 - θina rakalus\n","Match:\n","Example 23/89:  mi faσena tataσ tulaluσ \n","\n","0 - mi venus platunalus\n","1 - mi larzas atrnas\n","2 - θina rakalus\n","Match:\n","Example 24/89:  mini muluvanice tetana vel.ka.s.na.s. veleliiasi \n","\n","0 - mini muluvanice tetana ve.l.ka.s.na.s. veleliiasi\n","1 - mini muluvunike pisna perkena\n","2 - mi mulu venelasi velχaesi rasuniesi\n","Match:0\n","Example 25/89:  mi araθiale ziχuχe \n","\n","0 - mi aranθial\n","1 - mi laθialus\n","2 - mi araθia\n","Match:\n","Example 26/89:  mi mulu araθiale θanaχvilus prasanaia \n","\n","0 - mi mulu araθiale θanaχvilus prasanaia\n","1 - mi larθia tarinas\n","2 - mi malana larθiia cavis spuriies\n","Match:0\n","Example 27/89:  mi limu.r.ce.s. ta pruχu.m. \n","\n","0 - miliθunas plecus\n","1 - mi xuiḥṿlies qutum\n","2 - mi larθia tarnas\n","Match:\n","Example 28/89:  mi cupes ta \n","\n","0 - artes ta\n","1 - mi nanes\n","2 - mi cipaχ\n","Match:\n","Example 29/89:  mi lariςa velθieς \n","\n","0 - mi aranθial\n","1 - mi araθia\n","2 - mi larice[s]\n","Match:\n","Example 30/89:  mi hirumesi mulu \n","\n","0 - mi cailes cutus\n","1 - mi cailes cutus\n","2 - mi larices\n","Match:\n","Example 31/89:  var • celi • śuθ \n","\n","0 - ceisei\n","1 - laris atiu\n","2 - larnei\n","Match:\n","Example 32/89:  luθti • raχ • ture • acil \n","\n","0 - putina : ceizra : acil\n","1 - putina : ceizra : acil\n","2 - cusinas · larθal\n","Match:\n","Example 33/89:  vinum • θic ... \n","\n","0 - mi ramuθas\n","1 - mi araθia\n","2 - van[θ]\n","Match:\n","Example 34/89:  [mi] aranθia lapanas \n","\n","0 - [mi] aranθia lapanas\n","1 - mi larθia tarnas\n","2 - mi larθia tarinas\n","Match:0\n","Example 35/89:  mi aveles metienas \n","\n","0 - mi aveles metienas\n","1 - aveles hanpnas\n","2 - mi venelus σiθurnas\n","Match:0\n","Example 36/89:  mi lauχumeśa katilaσ' \n","\n","0 - mi lauχumeσa katilas\n","1 - mi larθia tarinas\n","2 - mi larzas atrnas\n","Match:0\n","Example 37/89:  larθ laucies θamequ larecesi ka iseriθesi celeniarasi mini zinece ve<l>θur kam arteθi \n","\n","0 - larθ laucies θamequ\n","    larecesi ka\n","    iseriθesi celeniarasi\n","    mini zinece veθur kam\n","    arteθi\n","1 - leθaie mulvanice mi.ne vhulve.s.\n","2 - mi mulu venelasi velχaesi rasuniesi\n","Match:0\n","Example 38/89:  cleusinas : laris : larisal : clan \n","\n","0 - cleusinas : laris : larisal : clan\n","1 - cusinas · larθal\n","2 - laris : almni : larθ[al]\n","Match:0\n","Example 39/89:  σ' : cemnil : v \n","\n","0 - σ : cemnil : v\n","1 - venel\n","2 - θenus\n","Match:0\n","Example 40/89:  meinei • papasliś a • vl • titialc • σ'ec \n","\n","0 - meinei · papaσliσ\n","    a · vl · titialc · sec\n","1 - mi fasθiia alσiia\n","2 - ve : ane : vezra : laurstia\n","l\n","Match:0\n","Example 41/89:  hasti : velθuria : lautniθa \n","\n","0 - hasti : velθuria : lautni \n","    θa\n","1 - θana . velθuria : uvial\n","2 - aθ : σeθrna : clanti\n","Match:0\n","Example 42/89:  θa : titi : parfilunia melutaśa \n","\n","0 - θa : titi : parfilunia\n","    melutaσa\n","1 - θina rakalus\n","2 - θana : cracia : seθrnaσa\n","Match:0\n","Example 43/89:  mi hvlaveς : ςpati \n","\n","0 - mi hvlaves : spati\n","1 - mi · cavθas\n","2 - mi χavexx\n","Match:0\n","Example 44/89:  mi laucies mezenties \n","\n","0 - mi laucies mezeṇṭies\n","1 - mi larisal meminiies\n","2 - mi aveles metienas\n","Match:0\n","Example 45/89:  mi veneluς σ'iθurnaς \n","\n","0 - mi venelus σiθurnas\n","1 - mi v[e]nelus vefunas\n","2 - mi venelus\n","Match:0\n","Example 46/89:  mi ςunθeruza ςpuriaς mlakaς \n","\n","0 - mi sunθeruza spurias mlakas\n","1 - mi luθumas qutumuθa\n","2 - zipunun prucnalu θalna\n","Match:0\n","Example 47/89:  mi : raq[u]nθia : tipeia : θina : malaχ [ : ] [malaka]si : ita : mena[q]u \n","\n","0 - mi : raq[u]nθa : tipeia : θina : malaχ [: malaka]si : ita : mena[q]u\n","1 - mi mulu araθiale θanaχvilus prasanaia\n","2 - f [ . ]a[ . ]nei : tut[vacat]nali[iσa]\n","Match:0\n","Example 48/89:  θanakviluš sucisnaia \n","\n","0 - θana . velθuria : uvial\n","1 - θana : cracia : seθrnaσa\n","2 - mi aveles metienas\n","Match:\n","Example 49/89:  .a.s^u \n","\n","0 - faltu\n","1 - a e v\n","2 - spiu\n","Match:\n","Example 50/89:  θina rakaluσ \n","\n","0 - θina rakalus\n","1 - mi tarnaial\n","2 - mi laθialus\n","Match:0\n","Example 51/89:  mi ramaθas treseles \n","\n","0 - mi ramaθas treseles\n","1 - mi ramuθas\n","2 - mi cavaθa[s]\n","Match:0\n","Example 52/89:  mi malana larθiia cavis spuriies \n","\n","0 - mi malana larθiia cavis spuriies\n","1 - mi larθia tarinas\n","2 - mi larisal meminiies\n","Match:0\n","Example 53/89:  mi amθial tetnies σ'uθiθi velclθi \n","\n","0 - mi arnθial tetnies σuθiθi velclθi\n","1 - mi ramaθas treseles\n","2 - mi larisal meminiies\n","Match:0\n","Example 54/89:  mi venuσ platunaluσ \n","\n","0 - mi venus platunalus\n","1 - mi laθialus\n","2 - mi venelus\n","Match:0\n","Example 55/89:  ei menepi χape mi • mi : karkus • venelus \n","\n","0 - ei menepi khape mi · mi : karkus \n","    venelus\n","1 - mi venus platunalus\n","2 - mi ramaθas treseles\n","Match:0\n","Example 56/89:  [cav]aθas mi seχis ein men[p]e kape mi nunaχ \n","\n","0 - [cav]aθas mi seχis ein men[p]e kape mi nunax\n","1 - cae : seiante : au : tutnal\n","2 - [ - - - ] arnθal : seχ [:] atial\n","Match:0\n","Example 57/89:  ein θui ara enan \n","\n","0 - ein θui ara enan\n","1 - mi urqenas\n","2 - mi larθia tarnas\n","Match:0\n","Example 58/89:  mi mla[χ] mlakaš \n","\n","0 - mi mutilates\n","1 - mi laivuzas\n","2 - [ mi ca]vaθas\n","Match:\n","Example 59/89:  arnθ savpunias turce menrvas \n","\n","0 - arnθ savpunias turce menrvas\n","1 - laris\n","    raθmsnas\n","    turce\n","2 - aranθ pecenas\n","Match:0\n","Example 60/89:  [ecn] [•] [tur]ce • cavi • cr[ai]culi • hercle.s. \n","\n","0 - [ecn . tur]ce . cavi . cr[ai]culi . hercle.s.\n","1 - ecn : turce\n","    m : haθles\n","    vle\n","2 - [f]aσti : cainei : c[vacat]aulias : rufe\n","Match:0\n","Example 61/89:  ecn : turce : laris : θefries : espial : atial : caθas \n","\n","0 - ecn : turce : laris : θefries : espial : atial : caθas\n","1 - ecn turce : pivi\n","    patrus : unial\n","    huinθnaias\n","2 - cn · turce\n","    tite · uta\n","    ves · v · l · \n","    hercles \n","    alpan ·\n","Match:0\n","Example 62/89:  ecn : turce : avle : havrnas : tuθina : apana selvansl tularias \n","\n","0 - ecn : turce : avle : havrnas : tuθina : apana\n","    selvansl tularias\n","1 - ecn turce : pivi\n","    patrus : unial\n","    huinθnaias\n","2 - ecn : turce : laris : θefries : espial : atial : caθas\n","Match:0\n","Example 63/89:  ecn turce : pivi patrus : unial huinθnaias \n","\n","0 - ecn turce : pivi\n","    patrus : unial\n","    huinθnaias\n","1 - ecn : turce : laris : θefries : espial : atial : caθas\n","2 - [ecn . tur]ce . cavi . cr[ai]culi . hercle.s.\n","Match:0\n","Example 64/89:  cn • turce tite • utaves • v • l • hercles alpan • \n","\n","0 - cn · turce\n","    tite · uta\n","    ves · v · l · \n","    hercles \n","    alpan ·\n","1 - [ecn . tur]ce . cavi . cr[ai]culi . hercle.s.\n","2 - ecn turce : pivi\n","    patrus : unial\n","    huinθnaias\n","Match:0\n","Example 65/89:  au • ceisina • la eiser aσ' • θuflθas • turce \n","\n","0 - au · ceisina · la eiser\n","    as · θuflθas · \n","    turce\n","1 - laris\n","    raθmsnas\n","    turce\n","2 - cleusinas : laris : larisal : clan\n","Match:0\n","Example 66/89:  truφu/n • peθu/nus • v • l/av lurmic/la • turc/e • XXX / cver \n","\n","0 - truφun · peθunus · v · lav\n","    lurmicla · turce · XXX · cver\n","1 - arnθ savpunias turce menrvas\n","2 - cleusinas : laris : larisal : clan\n","Match:0\n","Example 67/89:  mi fuflunusra \n","\n","0 - mi fuflunusra\n","1 - mi urqenas\n","2 - fulu\n","Match:0\n","Example 68/89:  mi • selvansl • canlas \n","\n","0 - mi · selvansl · canlas\n","1 - mi larzas atrnas\n","2 - mi aveles metienas\n","Match:0\n","Example 69/89:  mi celσ atial celθi \n","\n","0 - mi laθialus\n","1 - mi larices\n","2 - mi · selvansl · canlas\n","Match:\n","Example 70/89:  mi[ni] [velθ]ur paiθinaie[(s)] [mu]lu[vani]ce \n","\n","0 - mi[ni velθ]ur paiθinaie[s mu]lu[vani]ce\n","1 - [mi]ni venel paiθina[s mu]luvnice\n","2 - mi zinace velθ[ur a]ncinies.\n","Match:0\n","Example 71/89:  [mi]ni venel paiθina[s] [mu]luv<a>nice \n","\n","0 - [mi]ni venel paiθina[s mu]luvnice\n","1 - mi[ni velθ]ur paiθinaie[s mu]lu[vani]ce\n","2 - [ m]i velθuru[s] aχus\n","Match:0\n","Example 72/89:  mini muluvunike pisna perkena \n","\n","0 - mini muluvunike pisna perkena\n","1 - [mini mulu]van[ice – – – ]\n","2 - mi venelus σ{:}hekuntenas\n","Match:0\n","Example 73/89:  uθuzteθs vuvze \n","\n","0 - uθuzteθs vuvze\n","1 - artes ta\n","2 - rau ur : ve\n","Match:0\n","Example 74/89:  mi mulu venelasi velχaesi rasuniesi \n","\n","0 - mi mulu venelasi velχaesi rasuniesi\n","1 - mi malana larθiia cavis spuriies\n","2 - mi venelus σiθurnas\n","Match:0\n","Example 75/89:  leθaie mulvanice mi.ne vhulve.s. \n","\n","0 - leθaie mulvanice mi.ne vhulve.s.\n","1 - ae vipie cultces\n","2 - lθ : anie : lθ : celtalval :\n","Match:0\n","Example 76/89:  mi<ni> zinace vel[θur] [a]ncinie.š. \n","\n","0 - mi zinace velθ[ur a]ncinies.\n","1 - mi alza ceriies\n","2 - [ m]i velθuru[s] aχus\n","Match:0\n","Example 77/89:  men tite \n","\n","0 - men tite\n","1 - tite\n","2 - peiθe\n","Match:0\n","Example 78/89:  ae vipie cultces \n","\n","0 - ae vipie cultces\n","1 - vipe : acries\n","2 - avalnies\n","Match:0\n","Example 79/89:  ruvfies : acil \n","\n","0 - cnaviies mi\n","1 - evrs · ci\n","2 - luvcie[ – – – ]\n","Match:\n","Example 80/89:  putina : ceizra : acil \n","\n","0 - putina : ceizra : acil\n","1 - putina : ceizra : acil\n","2 - cusinas · larθal\n","Match:0 1\n","Example 81/89:  pultuceσi \n","\n","0 - petnei\n","1 - fulu\n","2 - larnei\n","Match:\n","Example 82/89:  luθcval canθiśl \n","\n","0 - luθcval\n","    canθiσa\n","    l\n","1 - mi aranθial\n","2 - cusinas · larθal\n","Match:0\n","Example 83/89:  tinσ lut \n","\n","0 - title\n","1 - tiχ\n","2 - mi nanes\n","Match:\n","Example 84/89:  mi avil[eσ---] \n","\n","0 - mi arzal [ - - - ]\n","1 - mi [ - - - ]\n","2 - mi za[ - - - ]\n","Match:\n","Example 85/89:  mi avil[e-------] \n","\n","0 - mi arzal [ - - - ]\n","1 - mi za[ - - - ]\n","2 - velχe : [ - - - ]\n","Match:\n","Example 86/89:  pumpun larθal \n","\n","0 - pumpun\n","    larθal\n","1 - cusinas · larθal\n","2 - numsi : \n","    larθi\n","Match:0\n","Example 87/89:  vel uθraσ | mlax \n","\n","0 - hetaθaσa\n","1 - velχi θan\n","    a\n","2 - velχasnas\n","Match:\n","Example 88/89:  zatlaθ : aiθas \n","\n","0 - hetaθaσa\n","1 - larzas maias\n","2 - larθia\n","Match:\n","Example 89/89:  σ'eθlans uni trepu \n","\n","0 - lanies\n","1 - peleas turis nele\n","2 - men tite\n","Match:\n"]}]},{"cell_type":"code","source":["print(\"Done:\", done)\n","index_map"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mD6342cTGjc-","executionInfo":{"status":"ok","timestamp":1671098050831,"user_tz":-60,"elapsed":241,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}},"outputId":"aba77ff5-56fe-4114-b673-f9c3cb701ff7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Done: 88\n"]},{"output_type":"execute_result","data":{"text/plain":["[(0, '0'),\n"," (1, ''),\n"," (2, '0'),\n"," (3, '0'),\n"," (4, ''),\n"," (5, ''),\n"," (6, ''),\n"," (7, ''),\n"," (8, ''),\n"," (9, '0'),\n"," (10, ''),\n"," (11, ''),\n"," (12, ''),\n"," (13, ''),\n"," (14, ''),\n"," (15, ''),\n"," (16, ''),\n"," (17, ''),\n"," (18, ''),\n"," (19, ''),\n"," (20, ''),\n"," (21, ''),\n"," (22, ''),\n"," (23, '0'),\n"," (24, ''),\n"," (25, '0'),\n"," (26, ''),\n"," (27, ''),\n"," (28, ''),\n"," (29, ''),\n"," (30, ''),\n"," (31, ''),\n"," (32, ''),\n"," (33, '0'),\n"," (34, '0'),\n"," (35, '0'),\n"," (36, '0'),\n"," (37, '0'),\n"," (38, '0'),\n"," (39, '0'),\n"," (40, '0'),\n"," (41, '0'),\n"," (42, '0'),\n"," (43, '0'),\n"," (44, '0'),\n"," (45, '0'),\n"," (46, '0'),\n"," (47, ''),\n"," (48, ''),\n"," (49, '0'),\n"," (50, '0'),\n"," (51, '0'),\n"," (52, '0'),\n"," (53, '0'),\n"," (54, '0'),\n"," (55, '0'),\n"," (56, '0'),\n"," (57, ''),\n"," (58, '0'),\n"," (59, '0'),\n"," (60, '0'),\n"," (61, '0'),\n"," (62, '0'),\n"," (63, '0'),\n"," (64, '0'),\n"," (65, '0'),\n"," (66, '0'),\n"," (67, '0'),\n"," (68, ''),\n"," (69, '0'),\n"," (70, '0'),\n"," (71, '0'),\n"," (72, '0'),\n"," (73, '0'),\n"," (74, '0'),\n"," (75, '0'),\n"," (76, '0'),\n"," (77, '0'),\n"," (78, ''),\n"," (79, '0 1'),\n"," (80, ''),\n"," (81, '0'),\n"," (82, ''),\n"," (83, ''),\n"," (84, ''),\n"," (85, '0'),\n"," (86, ''),\n"," (87, ''),\n"," (88, '')]"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","source":["def compute_id_matches(cleanETP, htmlETP, dist, pairs):\n","    matches = []\n","    for i, j in pairs:        \n","        j = j.strip()\n","        j.split(\" \")\n","        cleanId = cleanETP.iloc[i][\"ID\"]\n","        for n in j:            \n","            if len(n.strip()) > 0:                              \n","                n = int(n)\n","                htmlIndex = dist[i].argsort()[n]\n","                htmlId = htmlETP.iloc[htmlIndex][\"ID\"]\n","                matches.append((cleanId, htmlId))\n","    return matches         "],"metadata":{"id":"y2R1WWXmK_jn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["matches = compute_id_matches(cleanETP[(distances.min(axis=1) <= 10)], htmlETP, distances[(distances.min(axis=1) <= 10)], index_map)"],"metadata":{"id":"P4xmCiY1POwy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = pd.DataFrame(matches, columns=[\"Clean ETP ID\", \"HTML ETP ID\"])\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"aIj0JDakPQ0k","executionInfo":{"status":"ok","timestamp":1671099183245,"user_tz":-60,"elapsed":264,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}},"outputId":"311748a1-4ac6-4a47-9b69-d7b59f219b85"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Clean ETP ID  HTML ETP ID\n","0      ETP 192           192\n","1      ETP 269           269\n","2      ETP 251           251\n","3      ETP 285           285\n","4      ETP 269           269\n","5      ETP 303           303\n","6      ETP 213           213\n","7      ETP 214           214\n","8       ETP 43            43\n","9      ETP 333           333\n","10     ETP 192           192\n","11     ETP 287           287\n","12     ETP 181           181\n","13     ETP 334           334\n","14     ETP 230           230\n","15     ETP 289           289\n","16     ETP 344           344\n","17     ETP 209           209\n","18      ETP 28            28\n","19     ETP 118           118\n","20     ETP 323           323\n","21     ETP 325           325\n","22     ETP 335           335\n","23      ETP 83            83\n","24     ETP 331           331\n","25     ETP 110           110\n","26      ETP 15            15\n","27     ETP 285           285\n","28     ETP 339           339\n","29      ETP 29            29\n","30     ETP 189           189\n","31     ETP 332           332\n","32     ETP 238           238\n","33     ETP 340           340\n","34     ETP 279           279\n","35     ETP 239           239\n","36     ETP 253           253\n","37     ETP 329           329\n","38     ETP 353           353\n","39     ETP 196           196\n","40     ETP 284           284\n","41     ETP 106           106\n","42     ETP 128           128\n","43     ETP 186           186\n","44     ETP 120           120\n","45     ETP 304           304\n","46     ETP 195           195\n","47     ETP 112           124\n","48     ETP 112           112\n","49     ETP 286           286\n","50     ETP 343           343"],"text/html":["\n","  <div id=\"df-63870e46-f88b-4ed8-9563-d806775c311f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Clean ETP ID</th>\n","      <th>HTML ETP ID</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ETP 192</td>\n","      <td>192</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ETP 269</td>\n","      <td>269</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ETP 251</td>\n","      <td>251</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ETP 285</td>\n","      <td>285</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>ETP 269</td>\n","      <td>269</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>ETP 303</td>\n","      <td>303</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>ETP 213</td>\n","      <td>213</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>ETP 214</td>\n","      <td>214</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>ETP 43</td>\n","      <td>43</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>ETP 333</td>\n","      <td>333</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>ETP 192</td>\n","      <td>192</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>ETP 287</td>\n","      <td>287</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>ETP 181</td>\n","      <td>181</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>ETP 334</td>\n","      <td>334</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>ETP 230</td>\n","      <td>230</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>ETP 289</td>\n","      <td>289</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>ETP 344</td>\n","      <td>344</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>ETP 209</td>\n","      <td>209</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>ETP 28</td>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>ETP 118</td>\n","      <td>118</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>ETP 323</td>\n","      <td>323</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>ETP 325</td>\n","      <td>325</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>ETP 335</td>\n","      <td>335</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>ETP 83</td>\n","      <td>83</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>ETP 331</td>\n","      <td>331</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>ETP 110</td>\n","      <td>110</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>ETP 15</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>ETP 285</td>\n","      <td>285</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>ETP 339</td>\n","      <td>339</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>ETP 29</td>\n","      <td>29</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>ETP 189</td>\n","      <td>189</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>ETP 332</td>\n","      <td>332</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>ETP 238</td>\n","      <td>238</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>ETP 340</td>\n","      <td>340</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>ETP 279</td>\n","      <td>279</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>ETP 239</td>\n","      <td>239</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>ETP 253</td>\n","      <td>253</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>ETP 329</td>\n","      <td>329</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>ETP 353</td>\n","      <td>353</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>ETP 196</td>\n","      <td>196</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>ETP 284</td>\n","      <td>284</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>ETP 106</td>\n","      <td>106</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>ETP 128</td>\n","      <td>128</td>\n","    </tr>\n","    <tr>\n","      <th>43</th>\n","      <td>ETP 186</td>\n","      <td>186</td>\n","    </tr>\n","    <tr>\n","      <th>44</th>\n","      <td>ETP 120</td>\n","      <td>120</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>ETP 304</td>\n","      <td>304</td>\n","    </tr>\n","    <tr>\n","      <th>46</th>\n","      <td>ETP 195</td>\n","      <td>195</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>ETP 112</td>\n","      <td>124</td>\n","    </tr>\n","    <tr>\n","      <th>48</th>\n","      <td>ETP 112</td>\n","      <td>112</td>\n","    </tr>\n","    <tr>\n","      <th>49</th>\n","      <td>ETP 286</td>\n","      <td>286</td>\n","    </tr>\n","    <tr>\n","      <th>50</th>\n","      <td>ETP 343</td>\n","      <td>343</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-63870e46-f88b-4ed8-9563-d806775c311f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-63870e46-f88b-4ed8-9563-d806775c311f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-63870e46-f88b-4ed8-9563-d806775c311f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":98}]},{"cell_type":"code","source":["df.to_csv(\"ETP_Map.csv\")"],"metadata":{"id":"RR3nbd3xQUct"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Export the final CSV"],"metadata":{"id":"v2XcOcbGM1N9"}},{"cell_type":"code","source":["map_id = pd.read_csv(\"ETP_Map.csv\", index_col=0)"],"metadata":{"id":"zjjPFmUXM6uG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["htmlETP_unmatched_mask = htmlETP[\"ID\"].apply(lambda x: x not in map_id[\"HTML ETP ID\"])\n","print(\"New inscriptions:\", htmlETP_unmatched_mask.sum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8E_pgT_COD0J","executionInfo":{"status":"ok","timestamp":1674035033074,"user_tz":-60,"elapsed":305,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}},"outputId":"2c7b4678-ee31-4ae6-f1e0-e1e73656e5ed"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["New inscriptions: 319\n"]}]},{"cell_type":"code","source":["htmlETP_unmatched = htmlETP[htmlETP_unmatched_mask]\n","htmlETP_unmatched.loc[:, \"ID\"] = htmlETP_unmatched[\"ID\"].apply(lambda x: f\"ETP {x}\")\n","cleanETP = cleanETP.append(htmlETP_unmatched, ignore_index=True)\n","cleanETP"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":548},"id":"9_q0GS-5OyGw","executionInfo":{"status":"ok","timestamp":1674035159849,"user_tz":-60,"elapsed":260,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}},"outputId":"383c06bf-7bd1-4fb2-e7fb-5b7019f8a4aa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py:1773: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_single_column(ilocs[0], value, pi)\n"]},{"output_type":"execute_result","data":{"text/plain":["           ID                                           Etruscan  \\\n","0    ETP 192                 cleusinas : laris : larisal : clan    \n","1    Cr 2.20                                 mi karkanas θahvna    \n","2    Cm 2.46    mi e.i. mi.n.pi capi mi numar | θevru.c.l.na....   \n","3    ETP 269    mini muluvanice tetana ve.l.ka.s.na.s. veleli...   \n","4     Ta 3.2      itun turuce vene.l a.telinas. tinas dlniiaras    \n","..        ...                                                ...   \n","556   ETP 365                              [ – – – ]urθ[ – – – ]   \n","557   ETP 366                             [ – – – ]alv[  – – – ]   \n","558   ETP 367                            [ – – – ]tinai[ – – – ]   \n","559   ETP 368                            [ – – – ]nutas[ – – – ]   \n","560   ETP 369                   [ – – – ]xtrus · apanal · θucl ·   \n","\n","                                           Translation  \n","0                      Laris Cleusinas, son of Laris.   \n","1                      I (am) the container of Karkana  \n","2     'Don't take me. I (am) nunar. (I am the prope...  \n","3                Tetana Velkasnas gave me to Velellia.  \n","4     Venel Atelinas dedicated this (vase) to the s...  \n","..                                                 ...  \n","556                                                NaN  \n","557                                                NaN  \n","558                                                NaN  \n","559                                                NaN  \n","560                                                NaN  \n","\n","[561 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-e0af8944-966f-4c2b-aa20-4d7bee7cff7c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>Etruscan</th>\n","      <th>Translation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ETP 192</td>\n","      <td>cleusinas : laris : larisal : clan</td>\n","      <td>Laris Cleusinas, son of Laris.</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Cr 2.20</td>\n","      <td>mi karkanas θahvna</td>\n","      <td>I (am) the container of Karkana</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Cm 2.46</td>\n","      <td>mi e.i. mi.n.pi capi mi numar | θevru.c.l.na....</td>\n","      <td>'Don't take me. I (am) nunar. (I am the prope...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ETP 269</td>\n","      <td>mini muluvanice tetana ve.l.ka.s.na.s. veleli...</td>\n","      <td>Tetana Velkasnas gave me to Velellia.</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Ta 3.2</td>\n","      <td>itun turuce vene.l a.telinas. tinas dlniiaras</td>\n","      <td>Venel Atelinas dedicated this (vase) to the s...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>556</th>\n","      <td>ETP 365</td>\n","      <td>[ – – – ]urθ[ – – – ]</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>557</th>\n","      <td>ETP 366</td>\n","      <td>[ – – – ]alv[  – – – ]</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>558</th>\n","      <td>ETP 367</td>\n","      <td>[ – – – ]tinai[ – – – ]</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>559</th>\n","      <td>ETP 368</td>\n","      <td>[ – – – ]nutas[ – – – ]</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>560</th>\n","      <td>ETP 369</td>\n","      <td>[ – – – ]xtrus · apanal · θucl ·</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>561 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e0af8944-966f-4c2b-aa20-4d7bee7cff7c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e0af8944-966f-4c2b-aa20-4d7bee7cff7c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e0af8944-966f-4c2b-aa20-4d7bee7cff7c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["cleanETP.to_csv(\"ETP_clean.csv\")"],"metadata":{"id":"a1_-GfuCQ-lf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Add Dates and Locations\n","\n","Here we load the file with dates and loactions from the book and we had those from the website."],"metadata":{"id":"iKML8ztn-yt7"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import bs4\n","from bs4 import BeautifulSoup\n","from tqdm.notebook import tqdm\n","import re"],"metadata":{"id":"LmSSVLfP_BjU","executionInfo":{"status":"ok","timestamp":1675861922197,"user_tz":-60,"elapsed":1222,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["html = \"ETP - search.htm\"\n","data = \"ETP_final.xlsx\""],"metadata":{"id":"qoaa9AA2B3px","executionInfo":{"status":"ok","timestamp":1675859857887,"user_tz":-60,"elapsed":867,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["df = pd.read_excel(data)\n","del df[\"Column1\"]\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"llKMUKqVCAoQ","executionInfo":{"status":"ok","timestamp":1675859915696,"user_tz":-60,"elapsed":323,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}},"outputId":"bd05e501-2647-402a-937a-308a2ebc62ae"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           ID                City  Year - From  Year - To  \\\n","0    ETP 192   Ager Tarquiniensis        275.0      250.0   \n","1    Cr 2.20                Caere        675.0      650.0   \n","2    Cm 2.46             Campania        500.0      450.0   \n","3    ETP 269                  NaN        625.0      600.0   \n","4     Ta 3.2            Tarquinia        580.0      580.0   \n","..        ...                 ...          ...        ...   \n","556   ETP 365                 NaN          NaN        NaN   \n","557   ETP 366                 NaN          NaN        NaN   \n","558   ETP 367                 NaN          NaN        NaN   \n","559   ETP 368                 NaN          NaN        NaN   \n","560   ETP 369                 NaN          NaN        NaN   \n","\n","                                              Etruscan  \\\n","0                  cleusinas : laris : larisal : clan    \n","1                                  mi karkanas θahvna    \n","2     mi e.i. mi.n.pi capi mi numar | θevru.c.l.na....   \n","3     mini muluvanice tetana ve.l.ka.s.na.s. veleli...   \n","4       itun turuce vene.l a.telinas. tinas dlniiaras    \n","..                                                 ...   \n","556                                      [---]urθ[---]   \n","557                                      [---]alv[---]   \n","558                                    [---]tinai[---]   \n","559                                    [---]nutas[---]   \n","560                       [---]xtrus • apanal • θucl •   \n","\n","                                           Translation  \n","0                      Laris Cleusinas, son of Laris.   \n","1                      I (am) the container of Karkana  \n","2     'Don't take me. I (am) nunar. (I am the prope...  \n","3                Tetana Velkasnas gave me to Velellia.  \n","4     Venel Atelinas dedicated this (vase) to the s...  \n","..                                                 ...  \n","556                                                NaN  \n","557                                                NaN  \n","558                                                NaN  \n","559                                                NaN  \n","560                                                NaN  \n","\n","[561 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-d5c11d02-3992-4175-8605-6cd6095113b8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>City</th>\n","      <th>Year - From</th>\n","      <th>Year - To</th>\n","      <th>Etruscan</th>\n","      <th>Translation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ETP 192</td>\n","      <td>Ager Tarquiniensis</td>\n","      <td>275.0</td>\n","      <td>250.0</td>\n","      <td>cleusinas : laris : larisal : clan</td>\n","      <td>Laris Cleusinas, son of Laris.</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Cr 2.20</td>\n","      <td>Caere</td>\n","      <td>675.0</td>\n","      <td>650.0</td>\n","      <td>mi karkanas θahvna</td>\n","      <td>I (am) the container of Karkana</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Cm 2.46</td>\n","      <td>Campania</td>\n","      <td>500.0</td>\n","      <td>450.0</td>\n","      <td>mi e.i. mi.n.pi capi mi numar | θevru.c.l.na....</td>\n","      <td>'Don't take me. I (am) nunar. (I am the prope...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ETP 269</td>\n","      <td>NaN</td>\n","      <td>625.0</td>\n","      <td>600.0</td>\n","      <td>mini muluvanice tetana ve.l.ka.s.na.s. veleli...</td>\n","      <td>Tetana Velkasnas gave me to Velellia.</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Ta 3.2</td>\n","      <td>Tarquinia</td>\n","      <td>580.0</td>\n","      <td>580.0</td>\n","      <td>itun turuce vene.l a.telinas. tinas dlniiaras</td>\n","      <td>Venel Atelinas dedicated this (vase) to the s...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>556</th>\n","      <td>ETP 365</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>[---]urθ[---]</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>557</th>\n","      <td>ETP 366</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>[---]alv[---]</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>558</th>\n","      <td>ETP 367</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>[---]tinai[---]</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>559</th>\n","      <td>ETP 368</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>[---]nutas[---]</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>560</th>\n","      <td>ETP 369</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>[---]xtrus • apanal • θucl •</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>561 rows × 6 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d5c11d02-3992-4175-8605-6cd6095113b8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d5c11d02-3992-4175-8605-6cd6095113b8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d5c11d02-3992-4175-8605-6cd6095113b8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["with open(html) as f:\n","    html_data = BeautifulSoup(f)"],"metadata":{"id":"B3VwyomtCpY-","executionInfo":{"status":"ok","timestamp":1675860069773,"user_tz":-60,"elapsed":339,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["date_re = re.compile(\"[0-9]+( ?- ?[0-9]+)?\")"],"metadata":{"id":"Fs0e5_HeJ5fk","executionInfo":{"status":"ok","timestamp":1675862041646,"user_tz":-60,"elapsed":305,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["def extract_info(html_data):\n","    \"\"\"\n","    Find ID, location and date (e.g., 450-400, 400, recent) \n","    \"\"\"\n","    docs = html_data.findAll(\"div\", {\"class\":\"document\"})\n","    info = []\n","    for doc in docs:\n","        id = doc.findAll(\"h3\")\n","        if len(id) == 0:\n","            print(\"Can't find id\")\n","            return None\n","        if len(id) > 1:\n","            print(\"Multiple ids\")\n","        try:\n","            id = id[0].text.strip().split(\":\")[0] # e.g., ETP 55\n","        except ValueError:\n","            print(f\"Can't parse id: {id[0].text}\")\n","            id = np.nan\n","\n","        divs = doc.findAll(\"div\")\n","        location = np.nan\n","        date_from = np.nan\n","        date_to = np.nan        \n","\n","        for div in divs:\n","            tmp = div.text.strip().lower()\n","            if tmp.startswith(\"location\"):\n","                location = div.find(\"a\").text.strip()\n","                location = location.split(\"(\")[0].strip()  # Take only the ancient name\n","            elif tmp.startswith(\"date\"):    \n","                tmp_date = div.find(\"a\").text.strip()\n","                if date_re.fullmatch(tmp_date):  # 500-450 or 500\n","                    tmp_date = tmp_date.split(\"-\")                    \n","                    date_from = tmp_date[0].strip()\n","                    date_to = tmp_date[-1].strip()  # If the date is 500, the range is 500 - 500\n","        info.append((id, location, date_from, date_to))\n","    return info       "],"metadata":{"id":"znmJ5g4xCGk0","executionInfo":{"status":"ok","timestamp":1675862566330,"user_tz":-60,"elapsed":460,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":["info = extract_info(html_data)\n","print(len(info))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8_4Yxpx0K_hZ","executionInfo":{"status":"ok","timestamp":1675862566665,"user_tz":-60,"elapsed":4,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}},"outputId":"573c41ca-8750-4d8b-b648-2088ada8016f"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["369\n"]}]},{"cell_type":"code","source":["# Interate through the list and merge (slow and easy)\n","for id_, loc_, from_, to_ in info:\n","    mask = df[\"ID\"] == id_\n","    df.loc[mask, \"City\"] = loc_\n","    df.loc[mask, \"Year - From\"] = from_\n","    df.loc[mask, \"Year - To\"] = to_"],"metadata":{"id":"KnmS51kWMc_v","executionInfo":{"status":"ok","timestamp":1675862925151,"user_tz":-60,"elapsed":800,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}}},"execution_count":43,"outputs":[]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"1dzE531sMmsO","executionInfo":{"status":"ok","timestamp":1675862928187,"user_tz":-60,"elapsed":676,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}},"outputId":"f34abb4e-fa0b-4063-bc33-08f24b84da2b"},"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           ID                City Year - From Year - To  \\\n","0    ETP 192   Ager Tarquiniensis       275.0     250.0   \n","1    Cr 2.20                Caere       675.0     650.0   \n","2    Cm 2.46             Campania       500.0     450.0   \n","3    ETP 269                  NaN       625.0     600.0   \n","4     Ta 3.2            Tarquinia       580.0     580.0   \n","..        ...                 ...         ...       ...   \n","556   ETP 365      Ager Saenensis         600       600   \n","557   ETP 366      Ager Saenensis         600       600   \n","558   ETP 367      Ager Saenensis         600       600   \n","559   ETP 368     Ager Faesulanus         600       575   \n","560   ETP 369            Rusellae         200       200   \n","\n","                                              Etruscan  \\\n","0                  cleusinas : laris : larisal : clan    \n","1                                  mi karkanas θahvna    \n","2     mi e.i. mi.n.pi capi mi numar | θevru.c.l.na....   \n","3     mini muluvanice tetana ve.l.ka.s.na.s. veleli...   \n","4       itun turuce vene.l a.telinas. tinas dlniiaras    \n","..                                                 ...   \n","556                                      [---]urθ[---]   \n","557                                      [---]alv[---]   \n","558                                    [---]tinai[---]   \n","559                                    [---]nutas[---]   \n","560                       [---]xtrus • apanal • θucl •   \n","\n","                                           Translation  \n","0                      Laris Cleusinas, son of Laris.   \n","1                      I (am) the container of Karkana  \n","2     'Don't take me. I (am) nunar. (I am the prope...  \n","3                Tetana Velkasnas gave me to Velellia.  \n","4     Venel Atelinas dedicated this (vase) to the s...  \n","..                                                 ...  \n","556                                                NaN  \n","557                                                NaN  \n","558                                                NaN  \n","559                                                NaN  \n","560                                                NaN  \n","\n","[561 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-732ee8aa-3243-47da-92ec-1473c4293c6b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>City</th>\n","      <th>Year - From</th>\n","      <th>Year - To</th>\n","      <th>Etruscan</th>\n","      <th>Translation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ETP 192</td>\n","      <td>Ager Tarquiniensis</td>\n","      <td>275.0</td>\n","      <td>250.0</td>\n","      <td>cleusinas : laris : larisal : clan</td>\n","      <td>Laris Cleusinas, son of Laris.</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Cr 2.20</td>\n","      <td>Caere</td>\n","      <td>675.0</td>\n","      <td>650.0</td>\n","      <td>mi karkanas θahvna</td>\n","      <td>I (am) the container of Karkana</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Cm 2.46</td>\n","      <td>Campania</td>\n","      <td>500.0</td>\n","      <td>450.0</td>\n","      <td>mi e.i. mi.n.pi capi mi numar | θevru.c.l.na....</td>\n","      <td>'Don't take me. I (am) nunar. (I am the prope...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ETP 269</td>\n","      <td>NaN</td>\n","      <td>625.0</td>\n","      <td>600.0</td>\n","      <td>mini muluvanice tetana ve.l.ka.s.na.s. veleli...</td>\n","      <td>Tetana Velkasnas gave me to Velellia.</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Ta 3.2</td>\n","      <td>Tarquinia</td>\n","      <td>580.0</td>\n","      <td>580.0</td>\n","      <td>itun turuce vene.l a.telinas. tinas dlniiaras</td>\n","      <td>Venel Atelinas dedicated this (vase) to the s...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>556</th>\n","      <td>ETP 365</td>\n","      <td>Ager Saenensis</td>\n","      <td>600</td>\n","      <td>600</td>\n","      <td>[---]urθ[---]</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>557</th>\n","      <td>ETP 366</td>\n","      <td>Ager Saenensis</td>\n","      <td>600</td>\n","      <td>600</td>\n","      <td>[---]alv[---]</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>558</th>\n","      <td>ETP 367</td>\n","      <td>Ager Saenensis</td>\n","      <td>600</td>\n","      <td>600</td>\n","      <td>[---]tinai[---]</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>559</th>\n","      <td>ETP 368</td>\n","      <td>Ager Faesulanus</td>\n","      <td>600</td>\n","      <td>575</td>\n","      <td>[---]nutas[---]</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>560</th>\n","      <td>ETP 369</td>\n","      <td>Rusellae</td>\n","      <td>200</td>\n","      <td>200</td>\n","      <td>[---]xtrus • apanal • θucl •</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>561 rows × 6 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-732ee8aa-3243-47da-92ec-1473c4293c6b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-732ee8aa-3243-47da-92ec-1473c4293c6b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-732ee8aa-3243-47da-92ec-1473c4293c6b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["df.to_csv(\"ETP_final.csv\")"],"metadata":{"id":"hPxiY_l4MvJq","executionInfo":{"status":"ok","timestamp":1675862955343,"user_tz":-60,"elapsed":616,"user":{"displayName":"Gianluca Vico","userId":"06968830886535994211"}}},"execution_count":45,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"6S_8vbVGN1E7"},"execution_count":null,"outputs":[]}]}